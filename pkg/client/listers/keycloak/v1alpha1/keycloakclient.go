/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/movewp3/keycloakclient-controller/api/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/client-go/tools/cache"
)

// KeycloakClientLister helps list KeycloakClients.
// All objects returned here must be treated as read-only.
type KeycloakClientLister interface {
	// List lists all KeycloakClients in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.KeycloakClient, err error)
	// KeycloakClients returns an object that can list and get KeycloakClients.
	KeycloakClients(namespace string) KeycloakClientNamespaceLister
	KeycloakClientListerExpansion
}

// keycloakClientLister implements the KeycloakClientLister interface.
type keycloakClientLister struct {
	indexer cache.Indexer
}

// NewKeycloakClientLister returns a new KeycloakClientLister.
func NewKeycloakClientLister(indexer cache.Indexer) KeycloakClientLister {
	return &keycloakClientLister{indexer: indexer}
}

// List lists all KeycloakClients in the indexer.
func (s *keycloakClientLister) List(selector labels.Selector) (ret []*v1alpha1.KeycloakClient, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KeycloakClient))
	})
	return ret, err
}

// KeycloakClients returns an object that can list and get KeycloakClients.
func (s *keycloakClientLister) KeycloakClients(namespace string) KeycloakClientNamespaceLister {
	return keycloakClientNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KeycloakClientNamespaceLister helps list and get KeycloakClients.
// All objects returned here must be treated as read-only.
type KeycloakClientNamespaceLister interface {
	// List lists all KeycloakClients in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.KeycloakClient, err error)
	// Get retrieves the KeycloakClient from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.KeycloakClient, error)
	KeycloakClientNamespaceListerExpansion
}

// keycloakClientNamespaceLister implements the KeycloakClientNamespaceLister
// interface.
type keycloakClientNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KeycloakClients in the indexer for a given namespace.
func (s keycloakClientNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.KeycloakClient, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KeycloakClient))
	})
	return ret, err
}

// Get retrieves the KeycloakClient from the indexer for a given namespace and name.
func (s keycloakClientNamespaceLister) Get(name string) (*v1alpha1.KeycloakClient, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(schema.GroupResource{Group: "keycloak.org", Resource: "keycloakclient"}, name)
	}
	return obj.(*v1alpha1.KeycloakClient), nil
}
